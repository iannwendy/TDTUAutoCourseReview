// Script x·ª≠ l√Ω trang ƒë√°nh gi√° TDTU
console.log('TDTU Survey Handler loaded');

// Function to get delay from parent window
function getSurveyDelay() {
    let delay = 2000; // Default 2 seconds
    
    // Try to get delay from parent window (content script)
    try {
        if (window.parent && window.parent.currentDelay) {
            delay = window.parent.currentDelay;
            console.log('Got delay from parent window:', delay);
        } else if (window.currentDelay) {
            delay = window.currentDelay;
            console.log('Got delay from current window:', delay);
        } else if (window.top && window.top.currentDelay) {
            delay = window.top.currentDelay;
            console.log('Got delay from top window:', delay);
        }
    } catch (error) {
        console.log('Could not access parent delay, using default:', delay);
    }
    
    return delay;
}

// Get delay - initialize before using in functions
let surveyDelay = getSurveyDelay();
console.log('Using survey delay:', surveyDelay);

// Bi·∫øn ƒë·ªÉ tracking cu·ªôn m∆∞·ª£t - TƒÉng t·ªëc ƒë·ªô l√™n
let isScrolling = false;
let scrollSpeed = 200; // Gi·∫£m t·ª´ 800ms xu·ªëng 200ms cho t·ªëc ƒë·ªô nhanh h∆°n

// Ki·ªÉm tra trang hi·ªán t·∫°i v√† x·ª≠ l√Ω t∆∞∆°ng ·ª©ng
if (window.location.href.includes('teaching-quality-survey.tdtu.edu.vn')) {
    
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initPageHandler);
    } else {
        initPageHandler();
    }
}

// TDTU Survey Auto-fill Script
console.log('TDTU Survey script loaded');

function initPageHandler() {
    const currentUrl = window.location.href;
    console.log('Current URL:', currentUrl);
    
    if (currentUrl.includes('Survey.aspx')) {
        // Trang kh·∫£o s√°t
        console.log('ƒêang ·ªü trang Survey.aspx - B·∫Øt ƒë·∫ßu t·ª± ƒë·ªông ƒëi·ªÅn v·ªõi cu·ªôn m∆∞·ª£t');
        setTimeout(() => {
            autoFillSurveyWithSmoothScroll();
        }, surveyDelay);
        
    } else if (currentUrl.includes('Result.aspx')) {
        // Trang k·∫øt qu·∫£
        console.log('ƒêang ·ªü trang Result.aspx - T√¨m n√∫t Ti·∫øp t·ª•c ƒë√°nh gi√°');
        setTimeout(() => {
            clickTiepTucDanhGia();
        }, surveyDelay);
        
    } else if (currentUrl.includes('choosesurvey.aspx')) {
        // Trang ch·ªçn m√¥n - th√¥ng b√°o ƒë√£ ho√†n th√†nh 1 m√¥n
        console.log('ƒê√£ quay l·∫°i trang ch·ªçn m√¥n - Ho√†n th√†nh 1 m√¥n h·ªçc');
        // Content script ch√≠nh s·∫Ω x·ª≠ l√Ω ti·∫øp
    }
}

function autoFillSurveyWithSmoothScroll() {
    console.log('B·∫Øt ƒë·∫ßu t·ª± ƒë·ªông ƒëi·ªÅn form ƒë√°nh gi√° v·ªõi cu·ªôn m∆∞·ª£t');
    
    try {
        // T√¨m t·∫•t c·∫£ radio buttons (th∆∞·ªùng l√† c√¢u h·ªèi ƒë√°nh gi√°)
        const radioGroups = findRadioGroups();
        
        if (radioGroups.length === 0) {
            console.log('Kh√¥ng t√¨m th·∫•y radio buttons ƒë·ªÉ ƒë√°nh gi√°');
            // C√≥ th·ªÉ l√† trang kh√°c, th·ª≠ t√¨m n√∫t ti·∫øp t·ª•c
            setTimeout(() => {
                clickTiepTuc();
            }, 1000);
            return;
        }
        
        console.log(`T√¨m th·∫•y ${radioGroups.length} nh√≥m c√¢u h·ªèi - B·∫Øt ƒë·∫ßu cu·ªôn m∆∞·ª£t nhanh`);
        
        // Cu·ªôn ƒë·∫øn ƒë·∫ßu trang tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
        smoothScrollToTop();
        
        // ƒêi·ªÅn t·ª´ng nh√≥m c√¢u h·ªèi v·ªõi cu·ªôn m∆∞·ª£t
        processQuestionsWithSmoothScroll(radioGroups);
        
    } catch (error) {
        console.error('L·ªói khi t·ª± ƒë·ªông ƒëi·ªÅn form:', error);
    }
}

function processQuestionsWithSmoothScroll(radioGroups) {
    let currentIndex = 0;
    
    function processNextQuestion() {
        if (currentIndex >= radioGroups.length) {
            // ƒê√£ ho√†n th√†nh t·∫•t c·∫£ c√¢u h·ªèi, cu·ªôn ƒë·∫øn cu·ªëi trang
            console.log('ƒê√£ ho√†n th√†nh t·∫•t c·∫£ c√¢u h·ªèi, cu·ªôn ƒë·∫øn cu·ªëi trang');
            setTimeout(() => {
                smoothScrollToBottom(() => {
                    // Sau khi cu·ªôn ƒë·∫øn cu·ªëi, click "Ti·∫øp t·ª•c"
                    setTimeout(() => {
                        clickTiepTuc();
                    }, 500);
                });
            }, 200);
            return;
        }
        
        const group = radioGroups[currentIndex];
        const questionNumber = currentIndex + 1;
        
        // ƒêi·ªÅn c√¢u h·ªèi
        fillRadioGroupWithScroll(group, questionNumber, () => {
            // Sau khi ƒëi·ªÅn xong c√¢u h·ªèi n√†y, chuy·ªÉn sang c√¢u ti·∫øp theo
            currentIndex++;
            setTimeout(processNextQuestion, scrollSpeed);
        });
    }
    
    // B·∫Øt ƒë·∫ßu x·ª≠ l√Ω t·ª´ c√¢u h·ªèi ƒë·∫ßu ti√™n
    processNextQuestion();
}

function fillRadioGroupWithScroll(radioGroup, questionNumber, callback) {
    if (radioGroup.length === 0) {
        callback();
        return;
    }
    
    // Ch·ªçn rating cao nh·∫•t (th∆∞·ªùng l√† "R·∫•t h√†i l√≤ng" ho·∫∑c ƒëi·ªÉm cao nh·∫•t)
    const selectedIndex = radioGroup.length - 1; // Ch·ªçn option cu·ªëi (cao nh·∫•t)
    const selectedRadio = radioGroup[selectedIndex];
    
    try {
        // Cu·ªôn m∆∞·ª£t ƒë·∫øn c√¢u h·ªèi hi·ªán t·∫°i
        smoothScrollToElement(selectedRadio, () => {
            // Sau khi cu·ªôn ƒë·∫øn, click ch·ªçn ƒë√°p √°n
            selectedRadio.click();
            console.log(`C√¢u h·ªèi ${questionNumber}: ƒê√£ ch·ªçn option ${selectedIndex + 1}/${radioGroup.length} (Rating cao nh·∫•t)`);
            
            // Highlight c√¢u h·ªèi ƒë√£ ch·ªçn
            highlightSelectedOption(selectedRadio);
            
            // G·ªçi callback ƒë·ªÉ ti·∫øp t·ª•c c√¢u h·ªèi ti·∫øp theo
            callback();
        });
        
    } catch (error) {
        console.error(`L·ªói khi ch·ªçn c√¢u h·ªèi ${questionNumber}:`, error);
        callback();
    }
}

function smoothScrollToTop() {
    console.log('üîù Cu·ªôn m∆∞·ª£t ƒë·∫øn ƒë·∫ßu trang');
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
}

function smoothScrollToElement(element, callback) {
    if (!element) {
        callback();
        return;
    }
    
    // T√¨m container c·ªßa element ƒë·ªÉ scroll ƒë·∫øn
    let container = element.closest('tr') || element.closest('div.question') || element.closest('.form-group') || element.parentElement;
    
    // T√≠nh to√°n v·ªã tr√≠ ƒë·ªÉ scroll
    const elementRect = container.getBoundingClientRect();
    const absoluteElementTop = elementRect.top + window.pageYOffset;
    const middle = absoluteElementTop - (window.innerHeight / 3); // Cu·ªôn ƒë·ªÉ element ·ªü 1/3 m√†n h√¨nh
    
    window.scrollTo({
        top: Math.max(0, middle),
        behavior: 'smooth'
    });
    
    // Ch·ªù cu·ªôn ho√†n th√†nh r·ªìi g·ªçi callback - Gi·∫£m th·ªùi gian ch·ªù
    setTimeout(callback, scrollSpeed * 0.4); // Gi·∫£m t·ª´ 60% xu·ªëng 40% ƒë·ªÉ nhanh h∆°n
}

function smoothScrollToBottom(callback) {
    console.log('‚¨áÔ∏è Cu·ªôn m∆∞·ª£t ƒë·∫øn cu·ªëi trang');
    
    // T√≠nh to√°n chi·ªÅu cao trang
    const documentHeight = Math.max(
        document.body.scrollHeight,
        document.body.offsetHeight,
        document.documentElement.clientHeight,
        document.documentElement.scrollHeight,
        document.documentElement.offsetHeight
    );
    
    window.scrollTo({
        top: documentHeight,
        behavior: 'smooth'
    });
    
    // Ch·ªù cu·ªôn ho√†n th√†nh - Gi·∫£m th·ªùi gian ch·ªù
    setTimeout(() => {
        console.log('‚úÖ ƒê√£ cu·ªôn ƒë·∫øn cu·ªëi trang');
        if (callback) callback();
    }, scrollSpeed * 0.8); // Gi·∫£m t·ª´ 1.5 xu·ªëng 0.8
}

function autoFillSurvey() {
    console.log('B·∫Øt ƒë·∫ßu t·ª± ƒë·ªông ƒëi·ªÅn form ƒë√°nh gi√° (legacy function)');
    
    try {
        // T√¨m t·∫•t c·∫£ radio buttons (th∆∞·ªùng l√† c√¢u h·ªèi ƒë√°nh gi√°)
        const radioGroups = findRadioGroups();
        
        if (radioGroups.length === 0) {
            console.log('Kh√¥ng t√¨m th·∫•y radio buttons ƒë·ªÉ ƒë√°nh gi√°');
            // C√≥ th·ªÉ l√† trang kh√°c, th·ª≠ t√¨m n√∫t ti·∫øp t·ª•c
            setTimeout(() => {
                clickTiepTuc();
            }, 1000);
            return;
        }
        
        console.log(`T√¨m th·∫•y ${radioGroups.length} nh√≥m c√¢u h·ªèi`);
        
        // ƒêi·ªÅn t·ª´ng nh√≥m c√¢u h·ªèi v·ªõi t·ªëc ƒë·ªô nhanh h∆°n
        radioGroups.forEach((group, index) => {
            setTimeout(() => {
                fillRadioGroup(group, index + 1);
            }, index * 200); // Gi·∫£m t·ª´ 300ms xu·ªëng 200ms ƒë·ªÉ ph√π h·ª£p v·ªõi t·ªëc ƒë·ªô m·ªõi
        });
        
        // T·ª± ƒë·ªông click "Ti·∫øp t·ª•c" sau khi ƒëi·ªÅn xong v·ªõi th·ªùi gian ng·∫Øn h∆°n
        setTimeout(() => {
            clickTiepTuc();
        }, radioGroups.length * 200 + 1000); // Gi·∫£m delay t·ªïng th·ªÉ
        
    } catch (error) {
        console.error('L·ªói khi t·ª± ƒë·ªông ƒëi·ªÅn form:', error);
    }
}

function clickTiepTuc() {
    console.log('T√¨m ki·∫øm n√∫t "Ti·∫øp t·ª•c"...');
    
    // T√¨m n√∫t "Ti·∫øp t·ª•c" v·ªõi ID btnTiepTuc
    const btnTiepTuc = document.getElementById('btnTiepTuc');
    
    if (btnTiepTuc) {
        console.log('T√¨m th·∫•y n√∫t "Ti·∫øp t·ª•c", s·∫Ω click sau 500ms...');
        
        // Highlight n√∫t
        btnTiepTuc.style.border = '3px solid #ff9800';
        btnTiepTuc.style.boxShadow = '0 0 10px #ff9800';
        
        setTimeout(() => {
            try {
                btnTiepTuc.click();
                console.log('ƒê√£ click n√∫t "Ti·∫øp t·ª•c"');
            } catch (error) {
                console.error('L·ªói khi click "Ti·∫øp t·ª•c":', error);
            }
        }, 500); // Fixed 500ms delay instead of surveyDelay
        
    } else {
        console.log('Kh√¥ng t√¨m th·∫•y n√∫t "Ti·∫øp t·ª•c"');
        // Th·ª≠ t√¨m c√°c selector kh√°c
        const alternativeSelectors = [
            'input[name="btnTiepTuc"]',
            'input[value*="Ti·∫øp t·ª•c"]',
            'input[value*="Next"]',
            'button:contains("Ti·∫øp t·ª•c")'
        ];
        
        let found = false;
        for (const selector of alternativeSelectors) {
            const btn = document.querySelector(selector);
            if (btn) {
                console.log(`T√¨m th·∫•y n√∫t v·ªõi selector: ${selector}`);
                setTimeout(() => btn.click(), 500); // Fixed 500ms delay
                found = true;
                break;
            }
        }
        
        if (!found) {
            console.log('Kh√¥ng t√¨m th·∫•y n√∫t "Ti·∫øp t·ª•c"');
        }
    }
}

function clickTiepTucDanhGia() {
    console.log('T√¨m ki·∫øm n√∫t "Ti·∫øp t·ª•c ƒë√°nh gi√°"...');
    
    // T√¨m n√∫t "Ti·∫øp t·ª•c ƒë√°nh gi√°" v·ªõi ID btnTiepTucDanhGia
    const btnTiepTucDanhGia = document.getElementById('btnTiepTucDanhGia');
    
    if (btnTiepTucDanhGia) {
        console.log('T√¨m th·∫•y n√∫t "Ti·∫øp t·ª•c ƒë√°nh gi√°", s·∫Ω click sau 500ms...');
        
        // Highlight n√∫t
        btnTiepTucDanhGia.style.border = '3px solid #4CAF50';
        btnTiepTucDanhGia.style.boxShadow = '0 0 10px #4CAF50';
        
        setTimeout(() => {
            try {
                btnTiepTucDanhGia.click();
                console.log('ƒê√£ click n√∫t "Ti·∫øp t·ª•c ƒë√°nh gi√°"');
            } catch (error) {
                console.error('L·ªói khi click "Ti·∫øp t·ª•c ƒë√°nh gi√°":', error);
            }
        }, 500); // Fixed 500ms delay instead of surveyDelay
        
    } else {
        console.log('Kh√¥ng t√¨m th·∫•y n√∫t "Ti·∫øp t·ª•c ƒë√°nh gi√°"');
        // Th·ª≠ t√¨m c√°c selector kh√°c
        const alternativeSelectors = [
            'input[name="btnTiepTucDanhGia"]',
            'input[value*="Ti·∫øp t·ª•c ƒë√°nh gi√°"]',
            'input[value*="Continue"]',
            'button:contains("Ti·∫øp t·ª•c ƒë√°nh gi√°")'
        ];
        
        let found = false;
        for (const selector of alternativeSelectors) {
            const btn = document.querySelector(selector);
            if (btn) {
                console.log(`T√¨m th·∫•y n√∫t v·ªõi selector: ${selector}`);
                setTimeout(() => btn.click(), 500); // Fixed 500ms delay
                found = true;
                break;
            }
        }
        
        if (!found) {
            console.log('Kh√¥ng t√¨m th·∫•y n√∫t "Ti·∫øp t·ª•c ƒë√°nh gi√°"');
        }
    }
}

function findRadioGroups() {
    const radioButtons = document.querySelectorAll('input[type="radio"]');
    const groups = {};
    
    radioButtons.forEach(radio => {
        if (radio.name) {
            if (!groups[radio.name]) {
                groups[radio.name] = [];
            }
            groups[radio.name].push(radio);
        }
    });
    
    return Object.values(groups);
}

function fillRadioGroup(radioGroup, questionNumber) {
    if (radioGroup.length === 0) return;
    
    // Ch·ªçn rating cao nh·∫•t (th∆∞·ªùng l√† "R·∫•t h√†i l√≤ng" ho·∫∑c ƒëi·ªÉm cao nh·∫•t) - Option cao nh·∫•t
    const selectedIndex = radioGroup.length - 1; // Ch·ªçn option cu·ªëi (cao nh·∫•t)
    
    try {
        radioGroup[selectedIndex].click();
        console.log(`C√¢u h·ªèi ${questionNumber}: ƒê√£ ch·ªçn option ${selectedIndex + 1}/${radioGroup.length} (Rating cao nh·∫•t)`);
        
        // Highlight c√¢u h·ªèi ƒë√£ ch·ªçn
        highlightSelectedOption(radioGroup[selectedIndex]);
        
        // Cu·ªôn m∆∞·ª£t ƒë·∫øn c√¢u h·ªèi v·ª´a ch·ªçn (cho legacy function)
        smoothScrollToElementBasic(radioGroup[selectedIndex]);
        
    } catch (error) {
        console.error(`L·ªói khi ch·ªçn c√¢u h·ªèi ${questionNumber}:`, error);
    }
}

function smoothScrollToElementBasic(element) {
    if (!element) return;
    
    try {
        // T√¨m container c·ªßa element ƒë·ªÉ scroll ƒë·∫øn
        let container = element.closest('tr') || element.closest('div.question') || element.closest('.form-group') || element.parentElement;
        
        // Cu·ªôn m∆∞·ª£t ƒë·∫øn element
        container.scrollIntoView({
            behavior: 'smooth',
            block: 'center',
            inline: 'nearest'
        });
    } catch (error) {
        console.log('Kh√¥ng th·ªÉ cu·ªôn ƒë·∫øn element:', error);
    }
}

function highlightSelectedOption(radioElement) {
    // T√¨m container c·ªßa radio button ƒë·ªÉ highlight
    let container = radioElement.closest('tr') || radioElement.closest('div') || radioElement.parentElement;
    
    if (container) {
        // Hi·ªáu ·ª©ng highlight ƒë·∫πp v√† m∆∞·ª£t m√†
        container.style.backgroundColor = '#e8f5e8';
        container.style.border = '2px solid #4CAF50';
        container.style.borderRadius = '4px';
        container.style.boxShadow = '0 2px 8px rgba(76, 175, 80, 0.3)';
        container.style.transform = 'scale(1.02)';
        container.style.transition = 'all 0.3s ease';
        
        // X√≥a highlight sau 1.5 gi√¢y (gi·∫£m t·ª´ 2 gi√¢y ƒë·ªÉ ph√π h·ª£p v·ªõi t·ªëc ƒë·ªô nhanh h∆°n)
        setTimeout(() => {
            container.style.backgroundColor = '';
            container.style.border = '';
            container.style.borderRadius = '';
            container.style.boxShadow = '';
            container.style.transform = '';
        }, 1500); // Gi·∫£m t·ª´ 2000ms xu·ªëng 1500ms
    }
} 